#cloud-config
package_update: true
package_upgrade: true

packages:
  - curl
  - apt-transport-https
  - ca-certificates
  - gnupg

runcmd:
  #Instalacja containerd
  - apt-get update
  - apt-get install -y ca-certificates
  - install -m 0755 -d /etc/apt/keyrings
  - curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  - chmod a+r /etc/apt/keyrings/docker.asc
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y containerd.io

  #Konfiguracja containerd https://kubernetes.io/docs/setup/production-environment/container-runtimes/
  - mkdir -p /etc/containerd
  - containerd config default > /etc/containerd/config.toml
  - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
  - systemctl enable containerd
  - systemctl restart containerd

  #Konfiguracja systemu
  - sed -i '/ swap / s/^/#/' /etc/fstab
  - swapoff -a

  #Konfiguracja kernela
  - modprobe overlay
  - modprobe br_netfilter
  - |
    cat <<EOF | tee /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
    EOF
  - |
    cat <<EOF | tee /etc/sysctl.d/kubernetes.conf
    net.ipv4.ip_forward = 1
    EOF
  - sysctl --system

  #Instalacja kubelet, kubeadm, kubectl
  - echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
  - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - apt-get update
  - apt-get install -y apt-transport-https ca-certificates curl gpg
  - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  - apt-get update
  - apt-get install -y kubelet kubeadm kubectl
  - apt-mark hold kubelet kubeadm kubectl
  - systemctl enable --now kubelet

  #Inciajlizacja clustra pod Calico
  - kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=$(hostname -I | awk '{print $1}')
  - sudo mkdir -p /home/hubertkiszka/.kube
  - sudo cp -i /etc/kubernetes/admin.conf /home/hubertkiszka/.kube/config
  - sudo chown hubertkiszka:hubertkiszka /home/hubertkiszka/.kube/config

  #Instalacja Calico CNI
  - export KUBECONFIG=/etc/kubernetes/admin.conf
  - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/tigera-operator.yaml
  - sleep 60
  - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/custom-resources.yaml

  #Generowanie joina dla worker nodeÃ³w i zapis do Azure Key Vault
  - az login --identity --allow-no-subscriptions
  - JOIN_COMMAND=$(kubeadm token create --print-join-command)
  - az keyvault secret set --vault-name "${key_vault_name}" --name "kubeadm-join-command" --value "$JOIN_COMMAND"

  #Instalacja ArgoCD
  - kubectl create namespace argocd
  - helm repo add argo https://argoproj.github.io/argo-helm
  - helm repo update
  - helm install argocd argo/argo-cd --namespace argocd --set server.service.type=LoadBalancer
  - helm repo add traefik https://traefik.github.io/charts
  - helm repo update
  - kubectl create namespace traefik
  - |
    cat <<EOF > /home/hubertkiszka/traefik-cfg.yml
    providers:
      kubernetesGateway:
        enabled: true
      kubernetesIngress:
        enabled: false

    service:
      type: NodePort
      EOF

  - helm install traefik traefik/traefik -n traefik -f /home/hubertkiszka/traefik-cfg.yml
  - sleep 120
  - |
    kubectl apply -f - <<EOF
    apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: git-cd
      namespace: argocd
    spec:
      project: default
      source:
        repoURL: '${git_repo_url}'
        targetRevision: '${git_branch}'
        path: '${git_path}'
      destination:
        server: https://kubernetes.default.svc
        namespace: default
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
        - CreateNamespace=true
    EOF
